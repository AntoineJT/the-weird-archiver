use std::fs::File;
use std::io::{Read, Write};

// TODO Avoid to use unwrap everywhere, do proper error handling
fn main() {
    let mut files = Vec::new();
    files.push(".gitignore");
    let batch = generate_batch(files);
    write_whole_file("test.bat", batch);
}

fn read_whole_file(filename: &str) -> Vec<u8> {
    let mut input = File::open(filename)
        .expect(format!("No {} file found!", filename).as_str());
    let mut buffer: Vec<u8> = Vec::new();
    input.read_to_end(&mut buffer)
        .expect("An error occured during original file reading");
    buffer
}

fn write_whole_file(filename: &str, content: String) {
    let mut file = File::create(filename).unwrap();
    file.write_all(content.as_bytes()).unwrap();
}

// I know base64 + hex is a good way to do the opposite of file compression, I will work on it later
// For now, I just want something fun to work with, to be used as a PoC
fn generate_batch(files: Vec<&str>) -> String {
    let mut batch = String::new();
    batch.push_str("@echo off
rem This file has been generated by the-weird-archiver: https://github.com/AntoineJT/the-weird-archiver
\n");
    for file in files {
        let input = read_whole_file(file);
        let b64 = base64::encode(input);
        let hex = hex::encode(b64).to_ascii_uppercase();

        // TODO Can check if file exists before, in order to print an error message
        let hex_extract = format!("echo {} > {}.{}", hex, file, "hex"); // Writes hex to a file
        let hex_to_b64 = format!("certutil -decodehex {}.hex {}.b64", file, file); // Decodes hex to underlying base64
        let rm_hex_file = format!("del {}.hex", file); // Deletes temporary hex file
        let b64_extract = format!("certutil -decode {}.b64 {}", file, file); // Decodes base64 to original file
        let rm_b64_file = format!("del {}.b64", file); // Removes temporary base64 file

        batch.push_str(format!("rem extract {}
{}\n{}\n{}\n{}\n{}\n", file, hex_extract, hex_to_b64, rm_hex_file, b64_extract, rm_b64_file).as_str());
    }
    batch
}
